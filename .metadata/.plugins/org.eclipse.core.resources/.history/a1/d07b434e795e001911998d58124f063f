import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

public class NewKruskalsMSF {

    /**
     * Edge class.
     *
     * @author Xingyue Zhao
     *
     */
    static class Edge {
        int source;
        int destination;
        int weight;

        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }

    private NewKruskalsMSF() {

    }

    public void makePriorityQ(PriorityQueue<Edge> q, int lines, Scanner in) {
        while (in.hasNextLine()) {
            String temp = in.nextLine();
            int source = Integer.parseInt(temp.substring(0, temp.indexOf(',')));
            int destination = Integer.parseInt(
                    temp.substring(temp.indexOf(',') + 1, temp.indexOf(':')));
            int weight = Integer
                    .parseInt(temp.substring(temp.indexOf(':') + 1));
            Edge e = new Edge(source, destination, weight);
            q.add(e);
        }
    }

    public static void mst(PriorityQueue<Edge> q, int number) {
        int[] parent = new int[number];
        makeSet(parent);
        ArrayList<Edge> arr = new ArrayList<>();
        int i = 0;
        while (i < number - 1) {
            Edge e = q.remove();
            int x = findSet(parent, e.source);
            int y = findSet(parent, e.destination);
            if (x != y) {
                arr.add(e);
                i++;
                union(parent, x, y);
            }
        }
        for (int j = 0; j < arr.size(); j++) {
            Edge e = arr.get(j);
            System.out.println(e.source + "," + e.destination + ":" + e.weight);
        }
    }

    public static void makeSet(int[] parent) {
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
    }

    public static int findSet(int[] parent, int x) {
        if (parent[x] != x) {
            x = findSet(parent, parent[x]);
        }
        return x;
    }

    public static void union(int[] parent, int x, int y) {
        parent[findSet(parent, y)] = findSet(parent, x);
    }

    public static void main(String[] args) throws IOException {
        File graphX = new File(
                "C:\\Users\\yjean\\Desktop\\sampleGraphs\\10-20.txt");
        Scanner graphXfile = new Scanner(graphX);
        Scanner count = new Scanner(graphX);

        NewKruskalsMSF msf = new NewKruskalsMSF();

        int lines = 0;
        while (count.hasNextLine()) {
            lines++;
        }
        int number = Integer.parseInt(graphXfile.nextLine());
        PriorityQueue<Edge> q = new PriorityQueue<>(lines - 1,
                Comparator.comparingInt(o -> o.weight));
        msf.makePriorityQ(q, lines, graphXfile);
        System.out.println("high");
        msf.mst(q, number);

    }

}
